<%-
  # get tensorflow modules
  m_cmd = "bash -il -c 'source /util/opt/lmod/lmod/init/profile && module use /util/opt/hcc-modules/Common && module -t avail tensorflow |& grep tensorflow' 2>/dev/null"
  begin
    output, status = Open3.capture2e(m_cmd)
    if status.success?
      _list_tf_versions = output.split("\n").map(&:strip).reject(&:blank?).sort
    else
      raise output
    end
  rescue => e
    _list_tf_versions = []
    m_error = e.message.strip
  end
-%>
---
attributes:
  addl_modules:
    label: "Additional modules (optional)"
    help: |
        <small>Space separated list of additional modules to load (eg. `tensorflow/py38/2.4`)</br/>
        Full list for [Crane](https://hcc.unl.edu/docs/applications/modules/available_software_for_crane/) or [Rhino](https://hcc.unl.edu/docs/applications/modules/available_software_for_rhino/)</small>
  tb_logdir:
    label: "Tensorboard logdir"
    data-filepicker: true
    data-target-file-type: dirs  # Valid values are: files, dirs, or both
    readonly: false
    required: true
    help: "Select the directory that contains data to visualize; defaults to $HOME."
  tb_extra_args:
    label: "Additional TensorBoard arguments (optional)"
  tf_version:
    label: "Tensorflow version"
    <%- if m_error -%>
      <span class="text-danger">Error when parsing module versions:</span>
      ```
      <%= m_error.gsub("\n", "\n      ") %>
      ```
    <%- end -%>
    <%- if _list_tf_versions.blank? -%>
    widget: text_field
    <%- else -%>
    widget: select
    options:
      <%- _list_tf_versions.each do |q| -%>
      - [ "<%= q %>", "<%= q %>" ]
      <%- end -%>
    <%- end -%>
  bc_queue:
    label: "Partition selection"
    value: "batch"
    help: |
      - `batch` - The normal general access partition
      - `gpu` - The gpu partition
      - *other partitions may be specified if your account has access*
  bc_num_slots: 1
  bc_num_cores:
    widget: "number_field"
    label: "Number of cores"
    help: "Number of cores requested on a node (min 1, max 8)"
    min: 1
    max: 8
    step: 1
    value: "1"
    id: "num_cores"
  bc_num_hours:
    widget: "number_field"
    label: "Running time in hours"
    help: "Maximum runtime in hours of Tensorboard server (min 1, max 8)"
    min: 1
    max: 8
    step: 1
    value: "1"
  bc_memory:
    widget: "number_field"
    label: "Requested RAM in GBs"
    help: "Maximum memory requested for Tensorboard server (min 1GB, max 16GBs)"
    min: 1
    max: 16
    step: 1
    value: "1"
    id: "memory"
  qos_type:
    widget: select
    label: "QoS type"
    value: "short"
    help: |
      - `short` - Use the short QoS to increase job priority. Limits per user are 6 hour job run time, 2 jobs of 16CPUs or fewer.
      - `normal` - Use the regular batch queue.
    options:
      - ["short", "short"]
      - ["normal", "normal"]
  bc_gres:
    widget: "text_field"
    label: "GRES"
    help: "This field is used primarily for gpu submissions. You must specify a gres of at least `gpu` when using the GPU partition. Other possible values may be
 [found here](https://hcc.unl.edu/docs/submitting_jobs/submitting_gpu_jobs/#requesting-gpu-resources-in-your-slurm-script)."
    value: ''
  bc_constraint:
    widget: "text_field"
    label: "Job Constraints"
    help: "Additional constraints for the job. Primarily used for specifying a [GPU type](https://hcc.unl.edu/docs/submitting_jobs/submitting_gpu_jobs/#available
-gpus) or [node type](https://hcc.unl.edu/docs/submitting_jobs/partitions/#use-of-infiniband-or-opa)."
    value: ''
  bc_email_address:
    widget: "email_field"
    value: ""
    label: "Email"
    help: "Email address used for notifications"
  bc_reservation:
    widget: "text_field"
    label: "Reservation"
    help: "Submit to a specific reservation if your account has access."
    value: ''

form:
  - addl_modules
  - tb_logdir
  - tb_extra_args
  - tf_version
  - bc_num_slots
  - bc_num_cores
  - bc_num_hours
  - bc_memory
  - qos_type
  - bc_queue
  - bc_reservation
  - bc_gres
  - bc_constraint
  - bc_email_address
  - bc_email_on_started
